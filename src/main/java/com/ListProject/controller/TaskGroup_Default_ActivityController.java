package com.ListProject.controller;

import java.util.ArrayList;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.ListProject.domain.core.TaskGroup;

import com.ListProject.service.TaskGroup_Default_ActivityService;



/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/TaskGroup_Default_Activity", description = "TaskGroup_Default_Activity of TaskGroup_Default_Activity", 
produces = "application/json")

@Controller("TaskGroup_Default_ActivityController")
@RequestMapping("/TaskGroup_Default_Activity")
public class TaskGroup_Default_ActivityController extends GpBaseController {


	TaskGroup_Default_ActivityService TaskGroup_Default_Activity_service;


	public TaskGroup_Default_ActivityService get_TaskGroup_Default_Activity_service() {
		return TaskGroup_Default_Activity_service;
	}


	@Resource(name="TaskGroup_Default_ActivityService")
	public void set_TaskGroup_Default_Activity_service(TaskGroup_Default_ActivityService TaskGroup_Default_Activity_service) {
		this.TaskGroup_Default_Activity_service = TaskGroup_Default_Activity_service;
	}




	//auths not ready at this time


	@ApiOperation(value = "/create_TaskGroup", httpMethod = "POST",
	notes = "creates a noun of TaskGroup", 
	response = TaskGroup.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.POST,value = "/create_TaskGroup" ,headers="Accept=application/json")
    @ResponseBody
	public TaskGroup create_TaskGroup(@RequestBody TaskGroup the_TaskGroup) throws Exception {

		TaskGroup a_TaskGroup;

		a_TaskGroup = TaskGroup_Default_Activity_service.create_taskgroup(the_TaskGroup, super.getUser());

		return a_TaskGroup;

	}

	//auths not ready at this time


	@ApiOperation(value = "/update_TaskGroup", httpMethod = "PUT",
	notes = "updates a noun of TaskGroup", 
	response = TaskGroup.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.PUT,value = "/update_TaskGroup" ,headers="Accept=application/json")
    @ResponseBody
	public TaskGroup update_TaskGroup(@RequestBody TaskGroup the_TaskGroup) throws Exception {

		TaskGroup a_TaskGroup;

		a_TaskGroup = TaskGroup_Default_Activity_service.update_taskgroup(the_TaskGroup, super.getUser());

		return a_TaskGroup;

	}

	//auths not ready at this time


	@ApiOperation(value = "/search_for_update_TaskGroup/{TaskGroup_id}", httpMethod = "GET",
	notes = "updates a noun of TaskGroup", 
	response = TaskGroup.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_TaskGroup/{TaskGroup_id}" ,headers="Accept=application/json")
    @ResponseBody
	public TaskGroup search_for_update_TaskGroup(@PathVariable("TaskGroup_id")long TaskGroup_id) throws Exception {

		TaskGroup the_TaskGroup = new TaskGroup();

		the_TaskGroup = TaskGroup_Default_Activity_service.taskgroup_search_for_update(TaskGroup_id, super.getUser());

		return the_TaskGroup;

	}

	//auths not ready at this time


	@ApiOperation(value = "/delete_TaskGroup/{TaskGroup_id}", httpMethod = "DELETE",
	notes = "deletes a noun of TaskGroup", 
	response = TaskGroup.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_TaskGroup/{TaskGroup_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_TaskGroup(@PathVariable("TaskGroup_id")long TaskGroup_id) throws Exception {

		String service_return_msg = "";

		service_return_msg = TaskGroup_Default_Activity_service.delete_taskgroup(TaskGroup_id, super.getUser());

		return service_return_msg;

	}

	//auths not ready at this time


	@ApiOperation(value = "/get_all_TaskGroup", httpMethod = "GET",
	notes = "special search that gets all values of TaskGroup", 
	response = TaskGroup.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET,value = "/get_all_TaskGroup" ,headers="Accept=application/json")
    @ResponseBody
	public ArrayList<TaskGroup> get_all_TaskGroup() throws Exception {

		ArrayList<TaskGroup> TaskGroup_list = new ArrayList<TaskGroup>();

		TaskGroup_list = TaskGroup_Default_Activity_service.get_all_taskgroup();

		return TaskGroup_list;

	}




}