package com.ListProject.controller;

import java.util.ArrayList;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.ListProject.domain.core.TaskStatus;

import com.ListProject.service.TaskStatus_Default_ActivityService;



/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/TaskStatus_Default_Activity", description = "TaskStatus_Default_Activity of TaskStatus_Default_Activity", 
produces = "application/json")

@Controller("TaskStatus_Default_ActivityController")
@RequestMapping("/TaskStatus_Default_Activity")
public class TaskStatus_Default_ActivityController extends GpBaseController {


	TaskStatus_Default_ActivityService TaskStatus_Default_Activity_service;


	public TaskStatus_Default_ActivityService get_TaskStatus_Default_Activity_service() {
		return TaskStatus_Default_Activity_service;
	}


	@Resource(name="TaskStatus_Default_ActivityService")
	public void set_TaskStatus_Default_Activity_service(TaskStatus_Default_ActivityService TaskStatus_Default_Activity_service) {
		this.TaskStatus_Default_Activity_service = TaskStatus_Default_Activity_service;
	}




	//auths not ready at this time


	@ApiOperation(value = "/create_TaskStatus", httpMethod = "POST",
	notes = "creates a noun of TaskStatus", 
	response = TaskStatus.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.POST,value = "/create_TaskStatus" ,headers="Accept=application/json")
    @ResponseBody
	public TaskStatus create_TaskStatus(@RequestBody TaskStatus the_TaskStatus) throws Exception {

		TaskStatus a_TaskStatus;

		a_TaskStatus = TaskStatus_Default_Activity_service.create_taskstatus(the_TaskStatus, super.getUser());

		return a_TaskStatus;

	}

	//auths not ready at this time


	@ApiOperation(value = "/update_TaskStatus", httpMethod = "PUT",
	notes = "updates a noun of TaskStatus", 
	response = TaskStatus.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.PUT,value = "/update_TaskStatus" ,headers="Accept=application/json")
    @ResponseBody
	public TaskStatus update_TaskStatus(@RequestBody TaskStatus the_TaskStatus) throws Exception {

		TaskStatus a_TaskStatus;

		a_TaskStatus = TaskStatus_Default_Activity_service.update_taskstatus(the_TaskStatus, super.getUser());

		return a_TaskStatus;

	}

	//auths not ready at this time


	@ApiOperation(value = "/search_for_update_TaskStatus/{TaskStatus_id}", httpMethod = "GET",
	notes = "updates a noun of TaskStatus", 
	response = TaskStatus.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_TaskStatus/{TaskStatus_id}" ,headers="Accept=application/json")
    @ResponseBody
	public TaskStatus search_for_update_TaskStatus(@PathVariable("TaskStatus_id")long TaskStatus_id) throws Exception {

		TaskStatus the_TaskStatus = new TaskStatus();

		the_TaskStatus = TaskStatus_Default_Activity_service.taskstatus_search_for_update(TaskStatus_id, super.getUser());

		return the_TaskStatus;

	}

	//auths not ready at this time


	@ApiOperation(value = "/delete_TaskStatus/{TaskStatus_id}", httpMethod = "DELETE",
	notes = "deletes a noun of TaskStatus", 
	response = TaskStatus.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_TaskStatus/{TaskStatus_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_TaskStatus(@PathVariable("TaskStatus_id")long TaskStatus_id) throws Exception {

		String service_return_msg = "";

		service_return_msg = TaskStatus_Default_Activity_service.delete_taskstatus(TaskStatus_id, super.getUser());

		return service_return_msg;

	}

	//auths not ready at this time


	@ApiOperation(value = "/get_all_TaskStatus", httpMethod = "GET",
	notes = "special search that gets all values of TaskStatus", 
	response = TaskStatus.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET,value = "/get_all_TaskStatus" ,headers="Accept=application/json")
    @ResponseBody
	public ArrayList<TaskStatus> get_all_TaskStatus() throws Exception {

		ArrayList<TaskStatus> TaskStatus_list = new ArrayList<TaskStatus>();

		TaskStatus_list = TaskStatus_Default_Activity_service.get_all_taskstatus();

		return TaskStatus_list;

	}

	//auths not ready at this time


	@ApiOperation(value = "/get_TaskStatus_by_parent_id", httpMethod = "GET",
	notes = "get by parent id of TaskStatus", 
	response = TaskStatus.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET,value = "/get_TaskStatus_by_parent_id" )
    @ResponseBody
	public TaskStatus get_TaskStatus_by_parent_id(@RequestParam(required = false, value = "Task_id", defaultValue = "0") long Task_id) throws Exception {

		TaskStatus a_TaskStatus;

		a_TaskStatus = TaskStatus_Default_Activity_service.get_taskstatus_by_parent_id(Task_id);

		return a_TaskStatus;

	}

	//auths not ready at this time


	@ApiOperation(value = "/delete_TaskStatus_by_parent_id", httpMethod = "DELETE",
	notes = "delete by parent of TaskStatus", 
	response = TaskStatus.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_TaskStatus_by_parent_id" )
    @ResponseBody
	public String  delete_TaskStatus_by_parent_id(@RequestParam(required = false, value = "Task_id", defaultValue = "0") long Task_id) throws Exception {

		String service_return_msg = "";

		service_return_msg = TaskStatus_Default_Activity_service.delete_taskstatus_by_parent_id(Task_id);

		return service_return_msg;

	}




}