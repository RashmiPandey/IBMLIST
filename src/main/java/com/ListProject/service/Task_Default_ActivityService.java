package com.ListProject.service;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.ListProject.dao.mysql.GpUserDAO;
import com.ListProject.dao.mysql.Task_Default_ActivityDao;
import com.ListProject.domain.core.GpUser;
import com.ListProject.domain.core.Task;

/**
 *
 * @author Geppetto Generated Code</br>
 *         Date Created: </br>
 * @since </br>
 *        build:
 *        </p>
 *
 *        code was generated by the Geppetto System </br>
 *        Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 *        The generated code is free to use by anyone
 *        </p>
 *
 *
 *
 */
@Service("Task_Default_ActivityService")
public class Task_Default_ActivityService extends GpBaseService {

	Task_Default_ActivityDao Task_Default_Activity_dao;

	GpUserDAO GpUserDAO;

	public Task_Default_ActivityDao get_Task_Default_Activity_dao() {
		return Task_Default_Activity_dao;
	}

	@Resource(name = "Task_Default_ActivityDao")
	public void set_Task_Default_Activity_dao(Task_Default_ActivityDao Task_Default_Activity_dao) {
		this.Task_Default_Activity_dao = Task_Default_Activity_dao;
	}

	public GpUserDAO getGpUserDAO() {
		return GpUserDAO;
	}

	@Resource(name = "GpUserDAO")
	public void setGpUserDAO(GpUserDAO gpUserDAO) {
		GpUserDAO = gpUserDAO;
	}

	

	// auths not ready at this time
	public Task create_task(Task Task, GpUser user) throws Exception {

		try {
			Task the_Task;
			
			the_Task = Task_Default_Activity_dao.create_task(Task, user);

			return the_Task;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public Task update_task(Task Task, GpUser user) throws Exception {

		try {
			Task the_Task;

			the_Task = Task_Default_Activity_dao.update_task(Task, user);

			return the_Task;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public Task task_search_for_update(long id, GpUser user) throws Exception {

		try {
			Task the_Task;

			the_Task = Task_Default_Activity_dao.task_search_for_update(id, user);
			/*
			 * the_Task.setTaskPriority(TaskPriority_Default_ActivityService.
			 * get_taskpriority_by_parent_id(the_Task.getId()));
			 * the_Task.setTaskStatus(TaskStatus_Default_ActivityService.
			 * get_taskstatus_by_parent_id(the_Task.getId()));
			 */

			return the_Task;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public String delete_task(long id, GpUser user) throws Exception {

		try {
			String method_return_message;

			method_return_message = Task_Default_Activity_dao.delete_task(id, user);

			return method_return_message;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	// auths not ready at this time
	public ArrayList<Task> get_all_task() throws Exception {

		try {
			ArrayList<Task> Task_list;

			Task_list = Task_Default_Activity_dao.get_all_task();
			
			return Task_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}
	
	public Task get_task_by_id(Long taskId) throws Exception {

		try {
			Task task=null;

			task = Task_Default_Activity_dao.get_task_by_id(taskId);
			/*
			 * for(Task Task : Task_list){
			 * Task.setTaskPriority(TaskPriority_Default_ActivityService.
			 * get_taskpriority_by_parent_id(Task.getId())); }for(Task Task :
			 * Task_list){
			 * Task.setTaskStatus(TaskStatus_Default_ActivityService.
			 * get_taskstatus_by_parent_id(Task.getId())); }
			 */

			return task;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;

	}

	public List get_all_users() {
		try {
			List Task_list;

			Task_list = GpUserDAO.getallUsers();

			return Task_list;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;
	}
	
	public ArrayList<GpUser> get_user_by_id(Long id) {
		try {
			ArrayList<GpUser> user;

			user = GpUserDAO.get_user_by_id(id);

			return user;

		} catch (Exception e) {

			System.out.println("ServiceException: " + e.toString());

		}
		return null;
	}

}