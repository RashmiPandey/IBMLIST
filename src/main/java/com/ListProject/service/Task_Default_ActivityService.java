package com.ListProject.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;



import com.ListProject.domain.core.Task;

import com.ListProject.dao.mysql.Task_Default_ActivityDao;

import com.ListProject.domain.core.GpUser;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("Task_Default_ActivityService")
public class Task_Default_ActivityService extends GpBaseService  {

	Task_Default_ActivityDao Task_Default_Activity_dao;

	TaskPriority_Default_ActivityService TaskPriority_Default_ActivityService;

	TaskStatus_Default_ActivityService TaskStatus_Default_ActivityService;


	public Task_Default_ActivityDao get_Task_Default_Activity_dao() {
		return Task_Default_Activity_dao;
	}


	@Resource(name="Task_Default_ActivityDao")
	public void set_Task_Default_Activity_dao(Task_Default_ActivityDao Task_Default_Activity_dao) {
		this.Task_Default_Activity_dao = Task_Default_Activity_dao;
	}


	public TaskPriority_Default_ActivityService get_TaskPriority_Default_ActivityService() {
		return TaskPriority_Default_ActivityService;
	}


	@Resource(name="TaskPriority_Default_ActivityService")
	public void set_TaskPriority_Default_ActivityService(TaskPriority_Default_ActivityService TaskPriority_Default_ActivityService) {
		this.TaskPriority_Default_ActivityService = TaskPriority_Default_ActivityService;
	}


	public TaskStatus_Default_ActivityService get_TaskStatus_Default_ActivityService() {
		return TaskStatus_Default_ActivityService;
	}


	@Resource(name="TaskStatus_Default_ActivityService")
	public void set_TaskStatus_Default_ActivityService(TaskStatus_Default_ActivityService TaskStatus_Default_ActivityService) {
		this.TaskStatus_Default_ActivityService = TaskStatus_Default_ActivityService;
	}



	//auths not ready at this time
	public Task create_task(Task Task, GpUser user) throws Exception {


		try{
			Task the_Task;

			the_Task = Task_Default_Activity_dao.create_task(Task, user);

			return the_Task;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public Task update_task(Task Task, GpUser user) throws Exception {


		try{
			Task the_Task;

			the_Task = Task_Default_Activity_dao.update_task(Task, user);

			return the_Task;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public Task task_search_for_update(long id, GpUser user) throws Exception {


		try{
			Task the_Task;

			the_Task = Task_Default_Activity_dao.task_search_for_update(id, user);
			the_Task.setTaskPriority(TaskPriority_Default_ActivityService.get_taskpriority_by_parent_id(the_Task.getId()));
			the_Task.setTaskStatus(TaskStatus_Default_ActivityService.get_taskstatus_by_parent_id(the_Task.getId()));


			return the_Task;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public String  delete_task(long id, GpUser user) throws Exception {


		try{
			String method_return_message;

			method_return_message = Task_Default_Activity_dao.delete_task(id, user);
			TaskPriority_Default_ActivityService.delete_taskpriority_by_parent_id(id);
			TaskStatus_Default_ActivityService.delete_taskstatus_by_parent_id(id);


			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public ArrayList<Task> get_all_task() throws Exception {


		try{
			ArrayList<Task> Task_list;

			Task_list = Task_Default_Activity_dao.get_all_task();
			for(Task Task : Task_list){
				Task.setTaskPriority(TaskPriority_Default_ActivityService.get_taskpriority_by_parent_id(Task.getId()));
			}for(Task Task : Task_list){
				Task.setTaskStatus(TaskStatus_Default_ActivityService.get_taskstatus_by_parent_id(Task.getId()));
			}

			return Task_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}




}