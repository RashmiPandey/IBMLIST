package com.ListProject.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;



import com.ListProject.domain.core.TaskGroup;

import com.ListProject.dao.mysql.TaskGroup_Default_ActivityDao;

import com.ListProject.domain.core.GpUser;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("TaskGroup_Default_ActivityService")
public class TaskGroup_Default_ActivityService extends GpBaseService  {

	TaskGroup_Default_ActivityDao TaskGroup_Default_Activity_dao;


	public TaskGroup_Default_ActivityDao get_TaskGroup_Default_Activity_dao() {
		return TaskGroup_Default_Activity_dao;
	}


	@Resource(name="TaskGroup_Default_ActivityDao")
	public void set_TaskGroup_Default_Activity_dao(TaskGroup_Default_ActivityDao TaskGroup_Default_Activity_dao) {
		this.TaskGroup_Default_Activity_dao = TaskGroup_Default_Activity_dao;
	}



	//auths not ready at this time
	public TaskGroup create_taskgroup(TaskGroup TaskGroup, GpUser user) throws Exception {


		try{
			TaskGroup the_TaskGroup;

			the_TaskGroup = TaskGroup_Default_Activity_dao.create_taskgroup(TaskGroup, user);

			return the_TaskGroup;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public TaskGroup update_taskgroup(TaskGroup TaskGroup, GpUser user) throws Exception {


		try{
			TaskGroup the_TaskGroup;

			the_TaskGroup = TaskGroup_Default_Activity_dao.update_taskgroup(TaskGroup, user);

			return the_TaskGroup;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public TaskGroup taskgroup_search_for_update(long id, GpUser user) throws Exception {


		try{
			TaskGroup the_TaskGroup;

			the_TaskGroup = TaskGroup_Default_Activity_dao.taskgroup_search_for_update(id, user);

			return the_TaskGroup;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public String  delete_taskgroup(long id, GpUser user) throws Exception {


		try{
			String method_return_message;

			method_return_message = TaskGroup_Default_Activity_dao.delete_taskgroup(id, user);

			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public ArrayList<TaskGroup> get_all_taskgroup() throws Exception {


		try{
			ArrayList<TaskGroup> TaskGroup_list;

			TaskGroup_list = TaskGroup_Default_Activity_dao.get_all_taskgroup();

			return TaskGroup_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}




}