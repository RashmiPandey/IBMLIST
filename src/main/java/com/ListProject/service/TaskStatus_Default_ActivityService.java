package com.ListProject.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;



import com.ListProject.domain.core.TaskStatus;

import com.ListProject.domain.core.Task;

import com.ListProject.dao.mysql.TaskStatus_Default_ActivityDao;

import com.ListProject.domain.core.GpUser;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("TaskStatus_Default_ActivityService")
public class TaskStatus_Default_ActivityService extends GpBaseService  {

	TaskStatus_Default_ActivityDao TaskStatus_Default_Activity_dao;


	public TaskStatus_Default_ActivityDao get_TaskStatus_Default_Activity_dao() {
		return TaskStatus_Default_Activity_dao;
	}


	@Resource(name="TaskStatus_Default_ActivityDao")
	public void set_TaskStatus_Default_Activity_dao(TaskStatus_Default_ActivityDao TaskStatus_Default_Activity_dao) {
		this.TaskStatus_Default_Activity_dao = TaskStatus_Default_Activity_dao;
	}



	//auths not ready at this time
	public TaskStatus create_taskstatus(TaskStatus TaskStatus, GpUser user) throws Exception {


		try{
			TaskStatus the_TaskStatus;

			the_TaskStatus = TaskStatus_Default_Activity_dao.create_taskstatus(TaskStatus, user);

			return the_TaskStatus;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public TaskStatus update_taskstatus(TaskStatus TaskStatus, GpUser user) throws Exception {


		try{
			TaskStatus the_TaskStatus;

			the_TaskStatus = TaskStatus_Default_Activity_dao.update_taskstatus(TaskStatus, user);

			return the_TaskStatus;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public TaskStatus taskstatus_search_for_update(long id, GpUser user) throws Exception {


		try{
			TaskStatus the_TaskStatus;

			the_TaskStatus = TaskStatus_Default_Activity_dao.taskstatus_search_for_update(id, user);

			return the_TaskStatus;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public String  delete_taskstatus(long id, GpUser user) throws Exception {


		try{
			String method_return_message;

			method_return_message = TaskStatus_Default_Activity_dao.delete_taskstatus(id, user);

			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public ArrayList<TaskStatus> get_all_taskstatus() throws Exception {


		try{
			ArrayList<TaskStatus> TaskStatus_list;

			TaskStatus_list = TaskStatus_Default_Activity_dao.get_all_taskstatus();

			return TaskStatus_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public TaskStatus get_taskstatus_by_parent_id(long Task_id) throws Exception {


		try{
			TaskStatus the_TaskStatus;

			the_TaskStatus = TaskStatus_Default_Activity_dao.get_taskstatus_by_parent_id(Task_id);

			return the_TaskStatus;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public String  delete_taskstatus_by_parent_id(long Task_id) throws Exception {


		try{
			String method_return_message;

			method_return_message = TaskStatus_Default_Activity_dao.delete_taskstatus_by_parent_id(Task_id);

			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}




}